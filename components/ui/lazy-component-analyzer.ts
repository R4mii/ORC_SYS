/**
 * Lazy Component Analysis Integration
 * 
 * This utility helps integrate the component analysis results with the lazy loading system.
 * It provides functions to optimize component loading based on usage patterns.
 */

import type { LazyComponentOptions } from './lazy-component';

// Load component analysis results
let analysisResults: any = null;

try {
  // Try to load the component analysis results
  // This is generated by running the analyze:components script
  analysisResults = require('../../component-analysis.json');
} catch (e) {
  // Analysis results not available, will use default settings
  console.warn('Component analysis results not found. Run npm run analyze:components:json to generate them.');
}

/**
 * Get optimal lazy loading options for a component based on analysis results
 * 
 * @param packageName - The Radix UI package name (e.g., '@radix-ui/react-dialog')
 * @param componentName - The component name (e.g., 'Root', 'Trigger')
 * @param defaultOptions - Default options to use if no analysis data is available
 * @returns Optimized lazy loading options
 */
export function getOptimizedLazyOptions(
  packageName: string,
  componentName: string,
  defaultOptions: LazyComponentOptions = {}
): LazyComponentOptions {
  // If analysis results aren't available, use default options
  if (!analysisResults) {
    return defaultOptions;
  }
  
  try {
    // Find the component usage data
    const usageData = analysisResults.components[componentName] || 
                      analysisResults.packages.used.find((p: any) => p.name === packageName);
    
    if (!usageData) {
      return defaultOptions;
    }
    
    // Check if this component is frequently used
    const frequentlyUsed = analysisResults.recommendations.some((rec: any) => 
      rec.title.includes('lazy loading') && 
      rec.components?.some((c: any) => c.name === componentName || c.package === packageName)
    );
    
    // Determine whether to eagerly load or lazy load based on usage pattern
    const optimizedOptions: LazyComponentOptions = {
      ...defaultOptions,
      
      // Preload frequently used components
      preload: frequentlyUsed,
      
      // Set appropriate error handling based on importance
      withErrorBoundary: true,
    };
    
    return optimizedOptions;
  } catch (e) {
    console.warn(`Error optimizing lazy options for ${packageName}/${componentName}:`, e);
    return defaultOptions;
  }
}

/**
 * Get a list of recommended components for preloading
 * 
 * @returns Array of component names that should be preloaded
 */
export function getRecommendedPreloadComponents(): string[] {
  if (!analysisResults) {
    return [];
  }
  
  try {
    // Find components recommended for preloading
    const preloadComponents: string[] = [];
    
    analysisResults.recommendations.forEach((rec: any) => {
      if (rec.title.includes('lazy loading') && rec.components) {
        rec.components.forEach((c: any) => {
          if (c.usageCount >= 3) {
            preloadComponents.push(c.name);
          }
        });
      }
    });
    
    return preloadComponents;
  } catch (e) {
    console.warn('Error getting recommended preload components:', e);
    return [];
  }
}

